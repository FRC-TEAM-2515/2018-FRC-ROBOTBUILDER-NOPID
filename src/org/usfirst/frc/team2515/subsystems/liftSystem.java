// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team2515.subsystems;

import org.usfirst.frc.team2515.RobotMap;
import org.usfirst.frc.team2515.commands.*;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class liftSystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX liftMotor = RobotMap.liftSystemliftMotor;
    private final Encoder liftEncoder = RobotMap.liftSystemliftEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    		SmartDashboard.putNumber("Lift Position", liftEncoder.getDistance());
    		if (atBottom()) {
    			liftMotor.stopMotor();
    		}
    		if (atTop()) {
    			liftMotor.stopMotor();
    		}
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
	public Command raiseLift() {
		liftMotor.set(1);
		return null;
	}
	public Command lowerLift() {
		liftMotor.set(-1);
		return null;
	}
	public Command stopLift() {
		liftMotor.set(0);
		return null;
	}
	public boolean atBottom() {
		if (liftEncoder.getDistance() <= 10) {
			return true;
		}
		return false;
	}
	public Command liftToMiddle() {
		if (liftEncoder.getDistance() <= 1300) {
			while (liftEncoder.getDistance() <= 1300) {
				raiseLift();
			}
			return null;
		} else if (liftEncoder.getDistance() >= 1400){
			while (liftEncoder.getDistance() >= 1400) {
				lowerLift();
			}
			return null;
		} else {
			return null;
		}
	}
	public boolean atMiddle() {
		double lowerbound = 1300;
		double upperbound = 1400;
		if (lowerbound <= liftEncoder.getDistance()  && liftEncoder.getDistance() <= upperbound) {
			return true;
		}
		return false;
	}
	public boolean atTop() {
		if (liftEncoder.getDistance() >= 2700) {
			return true;
		}
		return false;
	}
}

