// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team2515.subsystems;

import org.usfirst.frc.team2515.RobotMap;
import org.usfirst.frc.team2515.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.drive.MecanumDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class driveSystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController leftFrontMotor = RobotMap.driveSystemleftFrontMotor;
    private final SpeedController leftRearMotor = RobotMap.driveSystemleftRearMotor;
    private final SpeedController rightFrontMotor = RobotMap.driveSystemrightFrontMotor;
    private final SpeedController rightRearMotor = RobotMap.driveSystemrightRearMotor;
    private final MecanumDrive mecanumDrive = RobotMap.driveSystemmecanumDrive;
    private final AnalogGyro analogGyro = RobotMap.driveSystemanalogGyro;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    static final double gain = 2.0; //sets the gain. Raising the constant effectively increases sensitivity in the upper range, while decreasing the sensitivity in the lower range
    static final double deadband = .15; //sets the deadband width.
    static final double turnGain = 1.0;
    
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    		SmartDashboard.putNumber("Gyro Angle", analogGyro.getAngle());
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void drive(double varX, double varY, double varZ, double varA) {
        //mecanumDrive.driveCartesian(Robot.oi.joystick.getX(), Robot.oi.joystick.getY(),Robot.oi.joystick.getZ(), 0.0);
    		//Apply gain requires inversion of forward/backward X axis (note that Joystick X/Y and method X/Y are mixed up.
    		mecanumDrive.driveCartesian(applyGain(varX), -applyGain(varY), applyTurnGain(varZ), varA);
    }
    
    // Create dead zone for less sensitivity and ramp up acceleration for joystick
    public double applyGain(double x) {
    		if(x > -deadband && x < deadband) {
    			x=0;
    		}
    		else if(x>= deadband) {
    			x = x - deadband;
    			x = x / (1 - deadband);
    			x = Math.pow(x, gain);
    		}
    		else {
    			x = x + deadband;
    			x = x / (1 - deadband);
    			x = Math.pow(x, gain);
    			x = -x;
    		}
    		return x;
    	}
    
    public double applyTurnGain(double x) {
		if(x > -deadband && x < deadband) {
			x=0;
		}
		else if(x>= deadband) {
			x = x - deadband;
			x = x / (1 - deadband);
			x = Math.pow(x,turnGain);
		}
		else {
			x = x + deadband;
			x = x / (1 - deadband);
			x = Math.pow(x, turnGain);
			x = x;
		}
		return x;
	}
    
    // Reset Gyro angle to 0.0
    public void resetGyro() {
    		analogGyro.reset();
    }
}

